#ifndef SETUPS_PWM_SETUP_H_
#define SETUPS_PWM_SETUP_H_


//*****************************************************************************
//
// Числовые константы
//
//*****************************************************************************

#define PI						3.141593f
#define TWO_PI					6.283185f
#define PERIOD_DEG				360

//*****************************************************************************
//
// Хардварные параметры
//
//*****************************************************************************

#define CPU_CLOCK				80000000										//Частота процессора
#define ADC_RES					12												//Разрядность АЦП
#define UDMA_BUFF_SIZE_MAX		1024											//Максимальный размер буфера ПДП
#define ADC_REF					3300.0f											//Опорное напряжение АЦП, мВ
#define OUTPUT_VOLTAGE_MAX		5.0f											//Напряжение питания выходного фильтра, В
#define OUTPUT_VOLTAGE_AMP_MAX	2.0f											//максимальная амплитуда напряжение выходного фильтра, В
#define CURRENT_MAX				53.0f												//Максимальный ток планарного индуктора
#define K_R						0.235f											//Сопротивление токового шунта, Ом
#define K_SHUNT					50												//Усиление сигнала токового шунта
#define K_ADC					((1<<ADC_RES)/ADC_REF)							//Коэффициент преобразования АЦП
#define K_CONV					(K_ADC*K_SHUNT*K_R)								//Коэффициент преобразования тока планарного индуктора в сигнал АЦП


//*****************************************************************************
//
// Параметры анализа сигналов
//
//*****************************************************************************

#define SAMPLE_RATE			125000												//Частота сэмплирования сигналов
#define ANGLE_RES			360													//Параметр частотного разрешения
#define FEEDBACK_PERIOD		((float)ANGLE_RES/SAMPLE_RATE)						//Время измерения сигнала обратной связи
#define K_INT				4													//Интегральный коэффициент ПИД
#define WINDOW_PARTS		(1+(FREQ_NUMBER*ANGLE_RES)/UDMA_BUFF_SIZE_MAX)
#define K_HANN				2

//*****************************************************************************
//
// Начальные параметры ШИМ. Частота ШИМ одинакова для всех каналов.
//
//*****************************************************************************

#define PWM_FREQUENCY 		SAMPLE_RATE											//Частота ШИМ - 120 кГц.
#define PWM_MAX				(CPU_CLOCK/SAMPLE_RATE)								//Максимальное значение ШИМ
#define PWM_AMP_MAX			(PWM_MAX*OUTPUT_VOLTAGE_AMP_MAX/OUTPUT_VOLTAGE_MAX)	//Максимальная амплитуда ШИМ
#define PWM_BIAS			(PWM_MAX/2)											//Смещение ШИМ

//*****************************************************************************
//
// Начпльные параметры контроллера прямого доступа к памяти (ПДП). Контроллер
// работает в режиме пинг-понг. Настраивается величина буферов-приёмников, канал
// источника прерываний ПДП, источник и приёмник передаваемых данных.
//
//*****************************************************************************

#define MEM_BUFFER_SIZE		(FREQ_NUMBER*ANGLE_RES/WINDOW_PARTS)				//Размер буферов-приёмников.
#define UDMA_CHANNEL		UDMA_CHANNEL_ADC1									//Первый модуль АЦП инициирует передачу данных ПДП контроллером
#define UDMA_SRC_BUFF		((void *)(ADC0_BASE + ADC_O_SSFIFO1))				//Источник данных - четырёхъячеичный буфер первого модуля АЦП.

//*****************************************************************************
//
//Начальные параметры АЦП.
//
//*****************************************************************************

#define ADCx_BASE			ADC0_BASE											//Используется первый модуль АЦП.
#define SYSCTL_PERIPH_ADCx	SYSCTL_PERIPH_ADC0									//Тактирование регистров первого модуля АЦП.
#define SSy					2													//Используется четырёхъячеичный буфер АЦП.
#define SSySIZE				(8 >> SSy)											//Размер используемого буфера.
#define ADC_TRIGGER			(ADC_TRIGGER_PROCESSOR) 			//Триггер АЦП - первый генератор второго модуля ШИМ.
#define INT_ADCxSSy			INT_ADC0SS1											//Источник прерываний - четырёхъячеичный буфер первого модуля АЦП.

//*****************************************************************************
//
// Прототип структуры.
//
//*****************************************************************************

typedef struct
{
	float Re;																	//Действительная часть спектральной оставляющей сигнала
	float Im;																	//Мнимая часть спектральной составляющей сигнала
	int32_t PWMPhaseShift;														//Фаза ШИМ
	float HCosine[ANGLE_RES];													//Фильтрующая функция действительной части спектральной составляющей
	float HSine[ANGLE_RES];														//Фильтрующая функция мнимой части спектральной составляющей
	uint32_t Freq;																//Фильтруемая частота
	uint8_t Chan;																//Анализируемый канал ШИМ
	float PWMAmp;																//Амплитуда ШИМ
	float PWMAmpMax;
	float CurrentSetpoint;
} FFT;

#define FREQ_NUMBER			4													//Число анализируемых частот
#define FREQ0				12													//Номер гармоники первой частоты
#define FREQ1				18													//Номер гармоники второй частоты
#define FREQ2				24													//Номер гармоники третьей частоты
#define FREQ3				30													//Номер гармоники четвёртой частоты

#define CHAN_NUMBER			3													//Количество каналов ШИМ
#define CH1					0													//Канал 1
#define CH2					1													//Канал 2
#define CH3					2													//Канал 3

																				//Количество частот в канале ШИМ
#define CH1_FREQS			1													//Канал 1
#define CH2_FREQS			1													//Канал 2
#define CH3_FREQS			2													//Канал 3



//*****************************************************************************
//
// Прототипы функций.
//
//*****************************************************************************

void pwm_init_and_run(void);

#endif /* SETUPS_PWM_SETUP_H_ */
